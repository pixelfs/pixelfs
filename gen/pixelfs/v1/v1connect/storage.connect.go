// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pixelfs/v1/storage.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pixelfs/pixelfs/gen/pixelfs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "pixelfs.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServiceGetStoragesProcedure is the fully-qualified name of the StorageService's
	// GetStorages RPC.
	StorageServiceGetStoragesProcedure = "/pixelfs.v1.StorageService/GetStorages"
	// StorageServiceAddStorageProcedure is the fully-qualified name of the StorageService's AddStorage
	// RPC.
	StorageServiceAddStorageProcedure = "/pixelfs.v1.StorageService/AddStorage"
	// StorageServiceRemoveStorageProcedure is the fully-qualified name of the StorageService's
	// RemoveStorage RPC.
	StorageServiceRemoveStorageProcedure = "/pixelfs.v1.StorageService/RemoveStorage"
	// StorageServiceGetStorageLinksProcedure is the fully-qualified name of the StorageService's
	// GetStorageLinks RPC.
	StorageServiceGetStorageLinksProcedure = "/pixelfs.v1.StorageService/GetStorageLinks"
	// StorageServiceAddStorageLinkProcedure is the fully-qualified name of the StorageService's
	// AddStorageLink RPC.
	StorageServiceAddStorageLinkProcedure = "/pixelfs.v1.StorageService/AddStorageLink"
	// StorageServiceCleanStorageLinkProcedure is the fully-qualified name of the StorageService's
	// CleanStorageLink RPC.
	StorageServiceCleanStorageLinkProcedure = "/pixelfs.v1.StorageService/CleanStorageLink"
	// StorageServiceRemoveStorageLinkProcedure is the fully-qualified name of the StorageService's
	// RemoveStorageLink RPC.
	StorageServiceRemoveStorageLinkProcedure = "/pixelfs.v1.StorageService/RemoveStorageLink"
	// StorageServiceUploadProcedure is the fully-qualified name of the StorageService's Upload RPC.
	StorageServiceUploadProcedure = "/pixelfs.v1.StorageService/Upload"
	// StorageServiceValidateProcedure is the fully-qualified name of the StorageService's Validate RPC.
	StorageServiceValidateProcedure = "/pixelfs.v1.StorageService/Validate"
	// StorageServiceRemoveBlockProcedure is the fully-qualified name of the StorageService's
	// RemoveBlock RPC.
	StorageServiceRemoveBlockProcedure = "/pixelfs.v1.StorageService/RemoveBlock"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storageServiceServiceDescriptor                 = v1.File_pixelfs_v1_storage_proto.Services().ByName("StorageService")
	storageServiceGetStoragesMethodDescriptor       = storageServiceServiceDescriptor.Methods().ByName("GetStorages")
	storageServiceAddStorageMethodDescriptor        = storageServiceServiceDescriptor.Methods().ByName("AddStorage")
	storageServiceRemoveStorageMethodDescriptor     = storageServiceServiceDescriptor.Methods().ByName("RemoveStorage")
	storageServiceGetStorageLinksMethodDescriptor   = storageServiceServiceDescriptor.Methods().ByName("GetStorageLinks")
	storageServiceAddStorageLinkMethodDescriptor    = storageServiceServiceDescriptor.Methods().ByName("AddStorageLink")
	storageServiceCleanStorageLinkMethodDescriptor  = storageServiceServiceDescriptor.Methods().ByName("CleanStorageLink")
	storageServiceRemoveStorageLinkMethodDescriptor = storageServiceServiceDescriptor.Methods().ByName("RemoveStorageLink")
	storageServiceUploadMethodDescriptor            = storageServiceServiceDescriptor.Methods().ByName("Upload")
	storageServiceValidateMethodDescriptor          = storageServiceServiceDescriptor.Methods().ByName("Validate")
	storageServiceRemoveBlockMethodDescriptor       = storageServiceServiceDescriptor.Methods().ByName("RemoveBlock")
)

// StorageServiceClient is a client for the pixelfs.v1.StorageService service.
type StorageServiceClient interface {
	GetStorages(context.Context, *connect.Request[v1.GetStoragesRequest]) (*connect.Response[v1.GetStoragesResponse], error)
	AddStorage(context.Context, *connect.Request[v1.AddStorageRequest]) (*connect.Response[v1.AddStorageResponse], error)
	RemoveStorage(context.Context, *connect.Request[v1.RemoveStorageRequest]) (*connect.Response[v1.RemoveStorageResponse], error)
	GetStorageLinks(context.Context, *connect.Request[v1.GetStorageLinksRequest]) (*connect.Response[v1.GetStorageLinksResponse], error)
	AddStorageLink(context.Context, *connect.Request[v1.AddStorageLinkRequest]) (*connect.Response[v1.AddStorageLinkResponse], error)
	CleanStorageLink(context.Context, *connect.Request[v1.CleanStorageLinkRequest]) (*connect.Response[v1.CleanStorageLinkResponse], error)
	RemoveStorageLink(context.Context, *connect.Request[v1.RemoveStorageLinkRequest]) (*connect.Response[v1.RemoveStorageLinkResponse], error)
	Upload(context.Context, *connect.Request[v1.StorageUploadRequest]) (*connect.Response[v1.StorageUploadResponse], error)
	Validate(context.Context, *connect.Request[v1.StorageValidateRequest]) (*connect.Response[v1.StorageValidateResponse], error)
	RemoveBlock(context.Context, *connect.Request[v1.StorageRemoveBlockRequest]) (*connect.Response[v1.StorageRemoveBlockResponse], error)
}

// NewStorageServiceClient constructs a client for the pixelfs.v1.StorageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storageServiceClient{
		getStorages: connect.NewClient[v1.GetStoragesRequest, v1.GetStoragesResponse](
			httpClient,
			baseURL+StorageServiceGetStoragesProcedure,
			connect.WithSchema(storageServiceGetStoragesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addStorage: connect.NewClient[v1.AddStorageRequest, v1.AddStorageResponse](
			httpClient,
			baseURL+StorageServiceAddStorageProcedure,
			connect.WithSchema(storageServiceAddStorageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeStorage: connect.NewClient[v1.RemoveStorageRequest, v1.RemoveStorageResponse](
			httpClient,
			baseURL+StorageServiceRemoveStorageProcedure,
			connect.WithSchema(storageServiceRemoveStorageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStorageLinks: connect.NewClient[v1.GetStorageLinksRequest, v1.GetStorageLinksResponse](
			httpClient,
			baseURL+StorageServiceGetStorageLinksProcedure,
			connect.WithSchema(storageServiceGetStorageLinksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addStorageLink: connect.NewClient[v1.AddStorageLinkRequest, v1.AddStorageLinkResponse](
			httpClient,
			baseURL+StorageServiceAddStorageLinkProcedure,
			connect.WithSchema(storageServiceAddStorageLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cleanStorageLink: connect.NewClient[v1.CleanStorageLinkRequest, v1.CleanStorageLinkResponse](
			httpClient,
			baseURL+StorageServiceCleanStorageLinkProcedure,
			connect.WithSchema(storageServiceCleanStorageLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeStorageLink: connect.NewClient[v1.RemoveStorageLinkRequest, v1.RemoveStorageLinkResponse](
			httpClient,
			baseURL+StorageServiceRemoveStorageLinkProcedure,
			connect.WithSchema(storageServiceRemoveStorageLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upload: connect.NewClient[v1.StorageUploadRequest, v1.StorageUploadResponse](
			httpClient,
			baseURL+StorageServiceUploadProcedure,
			connect.WithSchema(storageServiceUploadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		validate: connect.NewClient[v1.StorageValidateRequest, v1.StorageValidateResponse](
			httpClient,
			baseURL+StorageServiceValidateProcedure,
			connect.WithSchema(storageServiceValidateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeBlock: connect.NewClient[v1.StorageRemoveBlockRequest, v1.StorageRemoveBlockResponse](
			httpClient,
			baseURL+StorageServiceRemoveBlockProcedure,
			connect.WithSchema(storageServiceRemoveBlockMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	getStorages       *connect.Client[v1.GetStoragesRequest, v1.GetStoragesResponse]
	addStorage        *connect.Client[v1.AddStorageRequest, v1.AddStorageResponse]
	removeStorage     *connect.Client[v1.RemoveStorageRequest, v1.RemoveStorageResponse]
	getStorageLinks   *connect.Client[v1.GetStorageLinksRequest, v1.GetStorageLinksResponse]
	addStorageLink    *connect.Client[v1.AddStorageLinkRequest, v1.AddStorageLinkResponse]
	cleanStorageLink  *connect.Client[v1.CleanStorageLinkRequest, v1.CleanStorageLinkResponse]
	removeStorageLink *connect.Client[v1.RemoveStorageLinkRequest, v1.RemoveStorageLinkResponse]
	upload            *connect.Client[v1.StorageUploadRequest, v1.StorageUploadResponse]
	validate          *connect.Client[v1.StorageValidateRequest, v1.StorageValidateResponse]
	removeBlock       *connect.Client[v1.StorageRemoveBlockRequest, v1.StorageRemoveBlockResponse]
}

// GetStorages calls pixelfs.v1.StorageService.GetStorages.
func (c *storageServiceClient) GetStorages(ctx context.Context, req *connect.Request[v1.GetStoragesRequest]) (*connect.Response[v1.GetStoragesResponse], error) {
	return c.getStorages.CallUnary(ctx, req)
}

// AddStorage calls pixelfs.v1.StorageService.AddStorage.
func (c *storageServiceClient) AddStorage(ctx context.Context, req *connect.Request[v1.AddStorageRequest]) (*connect.Response[v1.AddStorageResponse], error) {
	return c.addStorage.CallUnary(ctx, req)
}

// RemoveStorage calls pixelfs.v1.StorageService.RemoveStorage.
func (c *storageServiceClient) RemoveStorage(ctx context.Context, req *connect.Request[v1.RemoveStorageRequest]) (*connect.Response[v1.RemoveStorageResponse], error) {
	return c.removeStorage.CallUnary(ctx, req)
}

// GetStorageLinks calls pixelfs.v1.StorageService.GetStorageLinks.
func (c *storageServiceClient) GetStorageLinks(ctx context.Context, req *connect.Request[v1.GetStorageLinksRequest]) (*connect.Response[v1.GetStorageLinksResponse], error) {
	return c.getStorageLinks.CallUnary(ctx, req)
}

// AddStorageLink calls pixelfs.v1.StorageService.AddStorageLink.
func (c *storageServiceClient) AddStorageLink(ctx context.Context, req *connect.Request[v1.AddStorageLinkRequest]) (*connect.Response[v1.AddStorageLinkResponse], error) {
	return c.addStorageLink.CallUnary(ctx, req)
}

// CleanStorageLink calls pixelfs.v1.StorageService.CleanStorageLink.
func (c *storageServiceClient) CleanStorageLink(ctx context.Context, req *connect.Request[v1.CleanStorageLinkRequest]) (*connect.Response[v1.CleanStorageLinkResponse], error) {
	return c.cleanStorageLink.CallUnary(ctx, req)
}

// RemoveStorageLink calls pixelfs.v1.StorageService.RemoveStorageLink.
func (c *storageServiceClient) RemoveStorageLink(ctx context.Context, req *connect.Request[v1.RemoveStorageLinkRequest]) (*connect.Response[v1.RemoveStorageLinkResponse], error) {
	return c.removeStorageLink.CallUnary(ctx, req)
}

// Upload calls pixelfs.v1.StorageService.Upload.
func (c *storageServiceClient) Upload(ctx context.Context, req *connect.Request[v1.StorageUploadRequest]) (*connect.Response[v1.StorageUploadResponse], error) {
	return c.upload.CallUnary(ctx, req)
}

// Validate calls pixelfs.v1.StorageService.Validate.
func (c *storageServiceClient) Validate(ctx context.Context, req *connect.Request[v1.StorageValidateRequest]) (*connect.Response[v1.StorageValidateResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// RemoveBlock calls pixelfs.v1.StorageService.RemoveBlock.
func (c *storageServiceClient) RemoveBlock(ctx context.Context, req *connect.Request[v1.StorageRemoveBlockRequest]) (*connect.Response[v1.StorageRemoveBlockResponse], error) {
	return c.removeBlock.CallUnary(ctx, req)
}

// StorageServiceHandler is an implementation of the pixelfs.v1.StorageService service.
type StorageServiceHandler interface {
	GetStorages(context.Context, *connect.Request[v1.GetStoragesRequest]) (*connect.Response[v1.GetStoragesResponse], error)
	AddStorage(context.Context, *connect.Request[v1.AddStorageRequest]) (*connect.Response[v1.AddStorageResponse], error)
	RemoveStorage(context.Context, *connect.Request[v1.RemoveStorageRequest]) (*connect.Response[v1.RemoveStorageResponse], error)
	GetStorageLinks(context.Context, *connect.Request[v1.GetStorageLinksRequest]) (*connect.Response[v1.GetStorageLinksResponse], error)
	AddStorageLink(context.Context, *connect.Request[v1.AddStorageLinkRequest]) (*connect.Response[v1.AddStorageLinkResponse], error)
	CleanStorageLink(context.Context, *connect.Request[v1.CleanStorageLinkRequest]) (*connect.Response[v1.CleanStorageLinkResponse], error)
	RemoveStorageLink(context.Context, *connect.Request[v1.RemoveStorageLinkRequest]) (*connect.Response[v1.RemoveStorageLinkResponse], error)
	Upload(context.Context, *connect.Request[v1.StorageUploadRequest]) (*connect.Response[v1.StorageUploadResponse], error)
	Validate(context.Context, *connect.Request[v1.StorageValidateRequest]) (*connect.Response[v1.StorageValidateResponse], error)
	RemoveBlock(context.Context, *connect.Request[v1.StorageRemoveBlockRequest]) (*connect.Response[v1.StorageRemoveBlockResponse], error)
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServiceGetStoragesHandler := connect.NewUnaryHandler(
		StorageServiceGetStoragesProcedure,
		svc.GetStorages,
		connect.WithSchema(storageServiceGetStoragesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceAddStorageHandler := connect.NewUnaryHandler(
		StorageServiceAddStorageProcedure,
		svc.AddStorage,
		connect.WithSchema(storageServiceAddStorageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceRemoveStorageHandler := connect.NewUnaryHandler(
		StorageServiceRemoveStorageProcedure,
		svc.RemoveStorage,
		connect.WithSchema(storageServiceRemoveStorageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetStorageLinksHandler := connect.NewUnaryHandler(
		StorageServiceGetStorageLinksProcedure,
		svc.GetStorageLinks,
		connect.WithSchema(storageServiceGetStorageLinksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceAddStorageLinkHandler := connect.NewUnaryHandler(
		StorageServiceAddStorageLinkProcedure,
		svc.AddStorageLink,
		connect.WithSchema(storageServiceAddStorageLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceCleanStorageLinkHandler := connect.NewUnaryHandler(
		StorageServiceCleanStorageLinkProcedure,
		svc.CleanStorageLink,
		connect.WithSchema(storageServiceCleanStorageLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceRemoveStorageLinkHandler := connect.NewUnaryHandler(
		StorageServiceRemoveStorageLinkProcedure,
		svc.RemoveStorageLink,
		connect.WithSchema(storageServiceRemoveStorageLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceUploadHandler := connect.NewUnaryHandler(
		StorageServiceUploadProcedure,
		svc.Upload,
		connect.WithSchema(storageServiceUploadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceValidateHandler := connect.NewUnaryHandler(
		StorageServiceValidateProcedure,
		svc.Validate,
		connect.WithSchema(storageServiceValidateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceRemoveBlockHandler := connect.NewUnaryHandler(
		StorageServiceRemoveBlockProcedure,
		svc.RemoveBlock,
		connect.WithSchema(storageServiceRemoveBlockMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pixelfs.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServiceGetStoragesProcedure:
			storageServiceGetStoragesHandler.ServeHTTP(w, r)
		case StorageServiceAddStorageProcedure:
			storageServiceAddStorageHandler.ServeHTTP(w, r)
		case StorageServiceRemoveStorageProcedure:
			storageServiceRemoveStorageHandler.ServeHTTP(w, r)
		case StorageServiceGetStorageLinksProcedure:
			storageServiceGetStorageLinksHandler.ServeHTTP(w, r)
		case StorageServiceAddStorageLinkProcedure:
			storageServiceAddStorageLinkHandler.ServeHTTP(w, r)
		case StorageServiceCleanStorageLinkProcedure:
			storageServiceCleanStorageLinkHandler.ServeHTTP(w, r)
		case StorageServiceRemoveStorageLinkProcedure:
			storageServiceRemoveStorageLinkHandler.ServeHTTP(w, r)
		case StorageServiceUploadProcedure:
			storageServiceUploadHandler.ServeHTTP(w, r)
		case StorageServiceValidateProcedure:
			storageServiceValidateHandler.ServeHTTP(w, r)
		case StorageServiceRemoveBlockProcedure:
			storageServiceRemoveBlockHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) GetStorages(context.Context, *connect.Request[v1.GetStoragesRequest]) (*connect.Response[v1.GetStoragesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.GetStorages is not implemented"))
}

func (UnimplementedStorageServiceHandler) AddStorage(context.Context, *connect.Request[v1.AddStorageRequest]) (*connect.Response[v1.AddStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.AddStorage is not implemented"))
}

func (UnimplementedStorageServiceHandler) RemoveStorage(context.Context, *connect.Request[v1.RemoveStorageRequest]) (*connect.Response[v1.RemoveStorageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.RemoveStorage is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetStorageLinks(context.Context, *connect.Request[v1.GetStorageLinksRequest]) (*connect.Response[v1.GetStorageLinksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.GetStorageLinks is not implemented"))
}

func (UnimplementedStorageServiceHandler) AddStorageLink(context.Context, *connect.Request[v1.AddStorageLinkRequest]) (*connect.Response[v1.AddStorageLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.AddStorageLink is not implemented"))
}

func (UnimplementedStorageServiceHandler) CleanStorageLink(context.Context, *connect.Request[v1.CleanStorageLinkRequest]) (*connect.Response[v1.CleanStorageLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.CleanStorageLink is not implemented"))
}

func (UnimplementedStorageServiceHandler) RemoveStorageLink(context.Context, *connect.Request[v1.RemoveStorageLinkRequest]) (*connect.Response[v1.RemoveStorageLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.RemoveStorageLink is not implemented"))
}

func (UnimplementedStorageServiceHandler) Upload(context.Context, *connect.Request[v1.StorageUploadRequest]) (*connect.Response[v1.StorageUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.Upload is not implemented"))
}

func (UnimplementedStorageServiceHandler) Validate(context.Context, *connect.Request[v1.StorageValidateRequest]) (*connect.Response[v1.StorageValidateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.Validate is not implemented"))
}

func (UnimplementedStorageServiceHandler) RemoveBlock(context.Context, *connect.Request[v1.StorageRemoveBlockRequest]) (*connect.Response[v1.StorageRemoveBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.StorageService.RemoveBlock is not implemented"))
}
