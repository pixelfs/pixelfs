// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pixelfs/v1/meta.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pixelfs/pixelfs/gen/pixelfs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MetaServiceName is the fully-qualified name of the MetaService service.
	MetaServiceName = "pixelfs.v1.MetaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MetaServiceGetVersionProcedure is the fully-qualified name of the MetaService's GetVersion RPC.
	MetaServiceGetVersionProcedure = "/pixelfs.v1.MetaService/GetVersion"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	metaServiceServiceDescriptor          = v1.File_pixelfs_v1_meta_proto.Services().ByName("MetaService")
	metaServiceGetVersionMethodDescriptor = metaServiceServiceDescriptor.Methods().ByName("GetVersion")
)

// MetaServiceClient is a client for the pixelfs.v1.MetaService service.
type MetaServiceClient interface {
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
}

// NewMetaServiceClient constructs a client for the pixelfs.v1.MetaService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MetaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &metaServiceClient{
		getVersion: connect.NewClient[v1.GetVersionRequest, v1.GetVersionResponse](
			httpClient,
			baseURL+MetaServiceGetVersionProcedure,
			connect.WithSchema(metaServiceGetVersionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// metaServiceClient implements MetaServiceClient.
type metaServiceClient struct {
	getVersion *connect.Client[v1.GetVersionRequest, v1.GetVersionResponse]
}

// GetVersion calls pixelfs.v1.MetaService.GetVersion.
func (c *metaServiceClient) GetVersion(ctx context.Context, req *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// MetaServiceHandler is an implementation of the pixelfs.v1.MetaService service.
type MetaServiceHandler interface {
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
}

// NewMetaServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetaServiceHandler(svc MetaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	metaServiceGetVersionHandler := connect.NewUnaryHandler(
		MetaServiceGetVersionProcedure,
		svc.GetVersion,
		connect.WithSchema(metaServiceGetVersionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pixelfs.v1.MetaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MetaServiceGetVersionProcedure:
			metaServiceGetVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMetaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetaServiceHandler struct{}

func (UnimplementedMetaServiceHandler) GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.MetaService.GetVersion is not implemented"))
}
