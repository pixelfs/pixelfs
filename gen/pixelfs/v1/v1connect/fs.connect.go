// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pixelfs/v1/fs.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pixelfs/pixelfs/gen/pixelfs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileSystemServiceName is the fully-qualified name of the FileSystemService service.
	FileSystemServiceName = "pixelfs.v1.FileSystemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileSystemServiceListProcedure is the fully-qualified name of the FileSystemService's List RPC.
	FileSystemServiceListProcedure = "/pixelfs.v1.FileSystemService/List"
	// FileSystemServiceStatProcedure is the fully-qualified name of the FileSystemService's Stat RPC.
	FileSystemServiceStatProcedure = "/pixelfs.v1.FileSystemService/Stat"
	// FileSystemServiceCreateProcedure is the fully-qualified name of the FileSystemService's Create
	// RPC.
	FileSystemServiceCreateProcedure = "/pixelfs.v1.FileSystemService/Create"
	// FileSystemServiceRemoveProcedure is the fully-qualified name of the FileSystemService's Remove
	// RPC.
	FileSystemServiceRemoveProcedure = "/pixelfs.v1.FileSystemService/Remove"
	// FileSystemServiceCopyProcedure is the fully-qualified name of the FileSystemService's Copy RPC.
	FileSystemServiceCopyProcedure = "/pixelfs.v1.FileSystemService/Copy"
	// FileSystemServiceMoveProcedure is the fully-qualified name of the FileSystemService's Move RPC.
	FileSystemServiceMoveProcedure = "/pixelfs.v1.FileSystemService/Move"
	// FileSystemServiceMkdirProcedure is the fully-qualified name of the FileSystemService's Mkdir RPC.
	FileSystemServiceMkdirProcedure = "/pixelfs.v1.FileSystemService/Mkdir"
	// FileSystemServiceReadProcedure is the fully-qualified name of the FileSystemService's Read RPC.
	FileSystemServiceReadProcedure = "/pixelfs.v1.FileSystemService/Read"
	// FileSystemServiceWriteProcedure is the fully-qualified name of the FileSystemService's Write RPC.
	FileSystemServiceWriteProcedure = "/pixelfs.v1.FileSystemService/Write"
	// FileSystemServiceM3U8Procedure is the fully-qualified name of the FileSystemService's M3U8 RPC.
	FileSystemServiceM3U8Procedure = "/pixelfs.v1.FileSystemService/M3U8"
	// FileSystemServiceChmodProcedure is the fully-qualified name of the FileSystemService's Chmod RPC.
	FileSystemServiceChmodProcedure = "/pixelfs.v1.FileSystemService/Chmod"
	// FileSystemServiceChtimesProcedure is the fully-qualified name of the FileSystemService's Chtimes
	// RPC.
	FileSystemServiceChtimesProcedure = "/pixelfs.v1.FileSystemService/Chtimes"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	fileSystemServiceServiceDescriptor       = v1.File_pixelfs_v1_fs_proto.Services().ByName("FileSystemService")
	fileSystemServiceListMethodDescriptor    = fileSystemServiceServiceDescriptor.Methods().ByName("List")
	fileSystemServiceStatMethodDescriptor    = fileSystemServiceServiceDescriptor.Methods().ByName("Stat")
	fileSystemServiceCreateMethodDescriptor  = fileSystemServiceServiceDescriptor.Methods().ByName("Create")
	fileSystemServiceRemoveMethodDescriptor  = fileSystemServiceServiceDescriptor.Methods().ByName("Remove")
	fileSystemServiceCopyMethodDescriptor    = fileSystemServiceServiceDescriptor.Methods().ByName("Copy")
	fileSystemServiceMoveMethodDescriptor    = fileSystemServiceServiceDescriptor.Methods().ByName("Move")
	fileSystemServiceMkdirMethodDescriptor   = fileSystemServiceServiceDescriptor.Methods().ByName("Mkdir")
	fileSystemServiceReadMethodDescriptor    = fileSystemServiceServiceDescriptor.Methods().ByName("Read")
	fileSystemServiceWriteMethodDescriptor   = fileSystemServiceServiceDescriptor.Methods().ByName("Write")
	fileSystemServiceM3U8MethodDescriptor    = fileSystemServiceServiceDescriptor.Methods().ByName("M3U8")
	fileSystemServiceChmodMethodDescriptor   = fileSystemServiceServiceDescriptor.Methods().ByName("Chmod")
	fileSystemServiceChtimesMethodDescriptor = fileSystemServiceServiceDescriptor.Methods().ByName("Chtimes")
)

// FileSystemServiceClient is a client for the pixelfs.v1.FileSystemService service.
type FileSystemServiceClient interface {
	List(context.Context, *connect.Request[v1.FileListRequest]) (*connect.Response[v1.FileListResponse], error)
	Stat(context.Context, *connect.Request[v1.FileStatRequest]) (*connect.Response[v1.FileStatResponse], error)
	Create(context.Context, *connect.Request[v1.FileCreateRequest]) (*connect.Response[v1.FileCreateResponse], error)
	Remove(context.Context, *connect.Request[v1.FileRemoveRequest]) (*connect.Response[v1.FileRemoveResponse], error)
	Copy(context.Context, *connect.Request[v1.FileCopyRequest]) (*connect.Response[v1.FileCopyResponse], error)
	Move(context.Context, *connect.Request[v1.FileMoveRequest]) (*connect.Response[v1.FileMoveResponse], error)
	Mkdir(context.Context, *connect.Request[v1.FileMkdirRequest]) (*connect.Response[v1.FileMkdirResponse], error)
	Read(context.Context, *connect.Request[v1.FileReadRequest]) (*connect.Response[v1.FileReadResponse], error)
	Write(context.Context, *connect.Request[v1.FileWriteRequest]) (*connect.Response[v1.FileWriteResponse], error)
	M3U8(context.Context, *connect.Request[v1.FileM3U8Request]) (*connect.Response[v1.FileM3U8Response], error)
	Chmod(context.Context, *connect.Request[v1.FileChmodRequest]) (*connect.Response[v1.FileChmodResponse], error)
	Chtimes(context.Context, *connect.Request[v1.FileChtimesRequest]) (*connect.Response[v1.FileChtimesResponse], error)
}

// NewFileSystemServiceClient constructs a client for the pixelfs.v1.FileSystemService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileSystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileSystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileSystemServiceClient{
		list: connect.NewClient[v1.FileListRequest, v1.FileListResponse](
			httpClient,
			baseURL+FileSystemServiceListProcedure,
			connect.WithSchema(fileSystemServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stat: connect.NewClient[v1.FileStatRequest, v1.FileStatResponse](
			httpClient,
			baseURL+FileSystemServiceStatProcedure,
			connect.WithSchema(fileSystemServiceStatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v1.FileCreateRequest, v1.FileCreateResponse](
			httpClient,
			baseURL+FileSystemServiceCreateProcedure,
			connect.WithSchema(fileSystemServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		remove: connect.NewClient[v1.FileRemoveRequest, v1.FileRemoveResponse](
			httpClient,
			baseURL+FileSystemServiceRemoveProcedure,
			connect.WithSchema(fileSystemServiceRemoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		copy: connect.NewClient[v1.FileCopyRequest, v1.FileCopyResponse](
			httpClient,
			baseURL+FileSystemServiceCopyProcedure,
			connect.WithSchema(fileSystemServiceCopyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		move: connect.NewClient[v1.FileMoveRequest, v1.FileMoveResponse](
			httpClient,
			baseURL+FileSystemServiceMoveProcedure,
			connect.WithSchema(fileSystemServiceMoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		mkdir: connect.NewClient[v1.FileMkdirRequest, v1.FileMkdirResponse](
			httpClient,
			baseURL+FileSystemServiceMkdirProcedure,
			connect.WithSchema(fileSystemServiceMkdirMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		read: connect.NewClient[v1.FileReadRequest, v1.FileReadResponse](
			httpClient,
			baseURL+FileSystemServiceReadProcedure,
			connect.WithSchema(fileSystemServiceReadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		write: connect.NewClient[v1.FileWriteRequest, v1.FileWriteResponse](
			httpClient,
			baseURL+FileSystemServiceWriteProcedure,
			connect.WithSchema(fileSystemServiceWriteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		m3U8: connect.NewClient[v1.FileM3U8Request, v1.FileM3U8Response](
			httpClient,
			baseURL+FileSystemServiceM3U8Procedure,
			connect.WithSchema(fileSystemServiceM3U8MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		chmod: connect.NewClient[v1.FileChmodRequest, v1.FileChmodResponse](
			httpClient,
			baseURL+FileSystemServiceChmodProcedure,
			connect.WithSchema(fileSystemServiceChmodMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		chtimes: connect.NewClient[v1.FileChtimesRequest, v1.FileChtimesResponse](
			httpClient,
			baseURL+FileSystemServiceChtimesProcedure,
			connect.WithSchema(fileSystemServiceChtimesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileSystemServiceClient implements FileSystemServiceClient.
type fileSystemServiceClient struct {
	list    *connect.Client[v1.FileListRequest, v1.FileListResponse]
	stat    *connect.Client[v1.FileStatRequest, v1.FileStatResponse]
	create  *connect.Client[v1.FileCreateRequest, v1.FileCreateResponse]
	remove  *connect.Client[v1.FileRemoveRequest, v1.FileRemoveResponse]
	copy    *connect.Client[v1.FileCopyRequest, v1.FileCopyResponse]
	move    *connect.Client[v1.FileMoveRequest, v1.FileMoveResponse]
	mkdir   *connect.Client[v1.FileMkdirRequest, v1.FileMkdirResponse]
	read    *connect.Client[v1.FileReadRequest, v1.FileReadResponse]
	write   *connect.Client[v1.FileWriteRequest, v1.FileWriteResponse]
	m3U8    *connect.Client[v1.FileM3U8Request, v1.FileM3U8Response]
	chmod   *connect.Client[v1.FileChmodRequest, v1.FileChmodResponse]
	chtimes *connect.Client[v1.FileChtimesRequest, v1.FileChtimesResponse]
}

// List calls pixelfs.v1.FileSystemService.List.
func (c *fileSystemServiceClient) List(ctx context.Context, req *connect.Request[v1.FileListRequest]) (*connect.Response[v1.FileListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Stat calls pixelfs.v1.FileSystemService.Stat.
func (c *fileSystemServiceClient) Stat(ctx context.Context, req *connect.Request[v1.FileStatRequest]) (*connect.Response[v1.FileStatResponse], error) {
	return c.stat.CallUnary(ctx, req)
}

// Create calls pixelfs.v1.FileSystemService.Create.
func (c *fileSystemServiceClient) Create(ctx context.Context, req *connect.Request[v1.FileCreateRequest]) (*connect.Response[v1.FileCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Remove calls pixelfs.v1.FileSystemService.Remove.
func (c *fileSystemServiceClient) Remove(ctx context.Context, req *connect.Request[v1.FileRemoveRequest]) (*connect.Response[v1.FileRemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// Copy calls pixelfs.v1.FileSystemService.Copy.
func (c *fileSystemServiceClient) Copy(ctx context.Context, req *connect.Request[v1.FileCopyRequest]) (*connect.Response[v1.FileCopyResponse], error) {
	return c.copy.CallUnary(ctx, req)
}

// Move calls pixelfs.v1.FileSystemService.Move.
func (c *fileSystemServiceClient) Move(ctx context.Context, req *connect.Request[v1.FileMoveRequest]) (*connect.Response[v1.FileMoveResponse], error) {
	return c.move.CallUnary(ctx, req)
}

// Mkdir calls pixelfs.v1.FileSystemService.Mkdir.
func (c *fileSystemServiceClient) Mkdir(ctx context.Context, req *connect.Request[v1.FileMkdirRequest]) (*connect.Response[v1.FileMkdirResponse], error) {
	return c.mkdir.CallUnary(ctx, req)
}

// Read calls pixelfs.v1.FileSystemService.Read.
func (c *fileSystemServiceClient) Read(ctx context.Context, req *connect.Request[v1.FileReadRequest]) (*connect.Response[v1.FileReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// Write calls pixelfs.v1.FileSystemService.Write.
func (c *fileSystemServiceClient) Write(ctx context.Context, req *connect.Request[v1.FileWriteRequest]) (*connect.Response[v1.FileWriteResponse], error) {
	return c.write.CallUnary(ctx, req)
}

// M3U8 calls pixelfs.v1.FileSystemService.M3U8.
func (c *fileSystemServiceClient) M3U8(ctx context.Context, req *connect.Request[v1.FileM3U8Request]) (*connect.Response[v1.FileM3U8Response], error) {
	return c.m3U8.CallUnary(ctx, req)
}

// Chmod calls pixelfs.v1.FileSystemService.Chmod.
func (c *fileSystemServiceClient) Chmod(ctx context.Context, req *connect.Request[v1.FileChmodRequest]) (*connect.Response[v1.FileChmodResponse], error) {
	return c.chmod.CallUnary(ctx, req)
}

// Chtimes calls pixelfs.v1.FileSystemService.Chtimes.
func (c *fileSystemServiceClient) Chtimes(ctx context.Context, req *connect.Request[v1.FileChtimesRequest]) (*connect.Response[v1.FileChtimesResponse], error) {
	return c.chtimes.CallUnary(ctx, req)
}

// FileSystemServiceHandler is an implementation of the pixelfs.v1.FileSystemService service.
type FileSystemServiceHandler interface {
	List(context.Context, *connect.Request[v1.FileListRequest]) (*connect.Response[v1.FileListResponse], error)
	Stat(context.Context, *connect.Request[v1.FileStatRequest]) (*connect.Response[v1.FileStatResponse], error)
	Create(context.Context, *connect.Request[v1.FileCreateRequest]) (*connect.Response[v1.FileCreateResponse], error)
	Remove(context.Context, *connect.Request[v1.FileRemoveRequest]) (*connect.Response[v1.FileRemoveResponse], error)
	Copy(context.Context, *connect.Request[v1.FileCopyRequest]) (*connect.Response[v1.FileCopyResponse], error)
	Move(context.Context, *connect.Request[v1.FileMoveRequest]) (*connect.Response[v1.FileMoveResponse], error)
	Mkdir(context.Context, *connect.Request[v1.FileMkdirRequest]) (*connect.Response[v1.FileMkdirResponse], error)
	Read(context.Context, *connect.Request[v1.FileReadRequest]) (*connect.Response[v1.FileReadResponse], error)
	Write(context.Context, *connect.Request[v1.FileWriteRequest]) (*connect.Response[v1.FileWriteResponse], error)
	M3U8(context.Context, *connect.Request[v1.FileM3U8Request]) (*connect.Response[v1.FileM3U8Response], error)
	Chmod(context.Context, *connect.Request[v1.FileChmodRequest]) (*connect.Response[v1.FileChmodResponse], error)
	Chtimes(context.Context, *connect.Request[v1.FileChtimesRequest]) (*connect.Response[v1.FileChtimesResponse], error)
}

// NewFileSystemServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileSystemServiceHandler(svc FileSystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileSystemServiceListHandler := connect.NewUnaryHandler(
		FileSystemServiceListProcedure,
		svc.List,
		connect.WithSchema(fileSystemServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceStatHandler := connect.NewUnaryHandler(
		FileSystemServiceStatProcedure,
		svc.Stat,
		connect.WithSchema(fileSystemServiceStatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceCreateHandler := connect.NewUnaryHandler(
		FileSystemServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(fileSystemServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceRemoveHandler := connect.NewUnaryHandler(
		FileSystemServiceRemoveProcedure,
		svc.Remove,
		connect.WithSchema(fileSystemServiceRemoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceCopyHandler := connect.NewUnaryHandler(
		FileSystemServiceCopyProcedure,
		svc.Copy,
		connect.WithSchema(fileSystemServiceCopyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceMoveHandler := connect.NewUnaryHandler(
		FileSystemServiceMoveProcedure,
		svc.Move,
		connect.WithSchema(fileSystemServiceMoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceMkdirHandler := connect.NewUnaryHandler(
		FileSystemServiceMkdirProcedure,
		svc.Mkdir,
		connect.WithSchema(fileSystemServiceMkdirMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceReadHandler := connect.NewUnaryHandler(
		FileSystemServiceReadProcedure,
		svc.Read,
		connect.WithSchema(fileSystemServiceReadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceWriteHandler := connect.NewUnaryHandler(
		FileSystemServiceWriteProcedure,
		svc.Write,
		connect.WithSchema(fileSystemServiceWriteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceM3U8Handler := connect.NewUnaryHandler(
		FileSystemServiceM3U8Procedure,
		svc.M3U8,
		connect.WithSchema(fileSystemServiceM3U8MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceChmodHandler := connect.NewUnaryHandler(
		FileSystemServiceChmodProcedure,
		svc.Chmod,
		connect.WithSchema(fileSystemServiceChmodMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileSystemServiceChtimesHandler := connect.NewUnaryHandler(
		FileSystemServiceChtimesProcedure,
		svc.Chtimes,
		connect.WithSchema(fileSystemServiceChtimesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pixelfs.v1.FileSystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileSystemServiceListProcedure:
			fileSystemServiceListHandler.ServeHTTP(w, r)
		case FileSystemServiceStatProcedure:
			fileSystemServiceStatHandler.ServeHTTP(w, r)
		case FileSystemServiceCreateProcedure:
			fileSystemServiceCreateHandler.ServeHTTP(w, r)
		case FileSystemServiceRemoveProcedure:
			fileSystemServiceRemoveHandler.ServeHTTP(w, r)
		case FileSystemServiceCopyProcedure:
			fileSystemServiceCopyHandler.ServeHTTP(w, r)
		case FileSystemServiceMoveProcedure:
			fileSystemServiceMoveHandler.ServeHTTP(w, r)
		case FileSystemServiceMkdirProcedure:
			fileSystemServiceMkdirHandler.ServeHTTP(w, r)
		case FileSystemServiceReadProcedure:
			fileSystemServiceReadHandler.ServeHTTP(w, r)
		case FileSystemServiceWriteProcedure:
			fileSystemServiceWriteHandler.ServeHTTP(w, r)
		case FileSystemServiceM3U8Procedure:
			fileSystemServiceM3U8Handler.ServeHTTP(w, r)
		case FileSystemServiceChmodProcedure:
			fileSystemServiceChmodHandler.ServeHTTP(w, r)
		case FileSystemServiceChtimesProcedure:
			fileSystemServiceChtimesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileSystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileSystemServiceHandler struct{}

func (UnimplementedFileSystemServiceHandler) List(context.Context, *connect.Request[v1.FileListRequest]) (*connect.Response[v1.FileListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.List is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Stat(context.Context, *connect.Request[v1.FileStatRequest]) (*connect.Response[v1.FileStatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Stat is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Create(context.Context, *connect.Request[v1.FileCreateRequest]) (*connect.Response[v1.FileCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Create is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Remove(context.Context, *connect.Request[v1.FileRemoveRequest]) (*connect.Response[v1.FileRemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Remove is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Copy(context.Context, *connect.Request[v1.FileCopyRequest]) (*connect.Response[v1.FileCopyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Copy is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Move(context.Context, *connect.Request[v1.FileMoveRequest]) (*connect.Response[v1.FileMoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Move is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Mkdir(context.Context, *connect.Request[v1.FileMkdirRequest]) (*connect.Response[v1.FileMkdirResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Mkdir is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Read(context.Context, *connect.Request[v1.FileReadRequest]) (*connect.Response[v1.FileReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Read is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Write(context.Context, *connect.Request[v1.FileWriteRequest]) (*connect.Response[v1.FileWriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Write is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) M3U8(context.Context, *connect.Request[v1.FileM3U8Request]) (*connect.Response[v1.FileM3U8Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.M3U8 is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Chmod(context.Context, *connect.Request[v1.FileChmodRequest]) (*connect.Response[v1.FileChmodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Chmod is not implemented"))
}

func (UnimplementedFileSystemServiceHandler) Chtimes(context.Context, *connect.Request[v1.FileChtimesRequest]) (*connect.Response[v1.FileChtimesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.FileSystemService.Chtimes is not implemented"))
}
