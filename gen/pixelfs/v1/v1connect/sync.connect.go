// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pixelfs/v1/sync.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pixelfs/pixelfs/gen/pixelfs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SyncServiceName is the fully-qualified name of the SyncService service.
	SyncServiceName = "pixelfs.v1.SyncService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SyncServiceStartProcedure is the fully-qualified name of the SyncService's Start RPC.
	SyncServiceStartProcedure = "/pixelfs.v1.SyncService/Start"
	// SyncServiceStopProcedure is the fully-qualified name of the SyncService's Stop RPC.
	SyncServiceStopProcedure = "/pixelfs.v1.SyncService/Stop"
	// SyncServiceCreateSyncProcedure is the fully-qualified name of the SyncService's CreateSync RPC.
	SyncServiceCreateSyncProcedure = "/pixelfs.v1.SyncService/CreateSync"
	// SyncServiceRemoveSyncProcedure is the fully-qualified name of the SyncService's RemoveSync RPC.
	SyncServiceRemoveSyncProcedure = "/pixelfs.v1.SyncService/RemoveSync"
	// SyncServiceGetSyncListProcedure is the fully-qualified name of the SyncService's GetSyncList RPC.
	SyncServiceGetSyncListProcedure = "/pixelfs.v1.SyncService/GetSyncList"
	// SyncServiceGetSyncByIdProcedure is the fully-qualified name of the SyncService's GetSyncById RPC.
	SyncServiceGetSyncByIdProcedure = "/pixelfs.v1.SyncService/GetSyncById"
	// SyncServiceLockCheckProcedure is the fully-qualified name of the SyncService's LockCheck RPC.
	SyncServiceLockCheckProcedure = "/pixelfs.v1.SyncService/LockCheck"
	// SyncServiceUpdateStatusProcedure is the fully-qualified name of the SyncService's UpdateStatus
	// RPC.
	SyncServiceUpdateStatusProcedure = "/pixelfs.v1.SyncService/UpdateStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	syncServiceServiceDescriptor            = v1.File_pixelfs_v1_sync_proto.Services().ByName("SyncService")
	syncServiceStartMethodDescriptor        = syncServiceServiceDescriptor.Methods().ByName("Start")
	syncServiceStopMethodDescriptor         = syncServiceServiceDescriptor.Methods().ByName("Stop")
	syncServiceCreateSyncMethodDescriptor   = syncServiceServiceDescriptor.Methods().ByName("CreateSync")
	syncServiceRemoveSyncMethodDescriptor   = syncServiceServiceDescriptor.Methods().ByName("RemoveSync")
	syncServiceGetSyncListMethodDescriptor  = syncServiceServiceDescriptor.Methods().ByName("GetSyncList")
	syncServiceGetSyncByIdMethodDescriptor  = syncServiceServiceDescriptor.Methods().ByName("GetSyncById")
	syncServiceLockCheckMethodDescriptor    = syncServiceServiceDescriptor.Methods().ByName("LockCheck")
	syncServiceUpdateStatusMethodDescriptor = syncServiceServiceDescriptor.Methods().ByName("UpdateStatus")
)

// SyncServiceClient is a client for the pixelfs.v1.SyncService service.
type SyncServiceClient interface {
	Start(context.Context, *connect.Request[v1.SyncStartRequest]) (*connect.Response[v1.SyncStartResponse], error)
	Stop(context.Context, *connect.Request[v1.SyncStopRequest]) (*connect.Response[v1.SyncStopResponse], error)
	CreateSync(context.Context, *connect.Request[v1.SyncCreateRequest]) (*connect.Response[v1.SyncCreateResponse], error)
	RemoveSync(context.Context, *connect.Request[v1.SyncRemoveRequest]) (*connect.Response[v1.SyncRemoveResponse], error)
	GetSyncList(context.Context, *connect.Request[v1.SyncGetListRequest]) (*connect.Response[v1.SyncGetListResponse], error)
	GetSyncById(context.Context, *connect.Request[v1.SyncGetByIdRequest]) (*connect.Response[v1.SyncGetByIdResponse], error)
	LockCheck(context.Context, *connect.Request[v1.SyncLockCheckRequest]) (*connect.Response[v1.SyncLockCheckResponse], error)
	UpdateStatus(context.Context, *connect.Request[v1.SyncUpdateStatusRequest]) (*connect.Response[v1.SyncUpdateStatusResponse], error)
}

// NewSyncServiceClient constructs a client for the pixelfs.v1.SyncService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSyncServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &syncServiceClient{
		start: connect.NewClient[v1.SyncStartRequest, v1.SyncStartResponse](
			httpClient,
			baseURL+SyncServiceStartProcedure,
			connect.WithSchema(syncServiceStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stop: connect.NewClient[v1.SyncStopRequest, v1.SyncStopResponse](
			httpClient,
			baseURL+SyncServiceStopProcedure,
			connect.WithSchema(syncServiceStopMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createSync: connect.NewClient[v1.SyncCreateRequest, v1.SyncCreateResponse](
			httpClient,
			baseURL+SyncServiceCreateSyncProcedure,
			connect.WithSchema(syncServiceCreateSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeSync: connect.NewClient[v1.SyncRemoveRequest, v1.SyncRemoveResponse](
			httpClient,
			baseURL+SyncServiceRemoveSyncProcedure,
			connect.WithSchema(syncServiceRemoveSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSyncList: connect.NewClient[v1.SyncGetListRequest, v1.SyncGetListResponse](
			httpClient,
			baseURL+SyncServiceGetSyncListProcedure,
			connect.WithSchema(syncServiceGetSyncListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSyncById: connect.NewClient[v1.SyncGetByIdRequest, v1.SyncGetByIdResponse](
			httpClient,
			baseURL+SyncServiceGetSyncByIdProcedure,
			connect.WithSchema(syncServiceGetSyncByIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		lockCheck: connect.NewClient[v1.SyncLockCheckRequest, v1.SyncLockCheckResponse](
			httpClient,
			baseURL+SyncServiceLockCheckProcedure,
			connect.WithSchema(syncServiceLockCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateStatus: connect.NewClient[v1.SyncUpdateStatusRequest, v1.SyncUpdateStatusResponse](
			httpClient,
			baseURL+SyncServiceUpdateStatusProcedure,
			connect.WithSchema(syncServiceUpdateStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// syncServiceClient implements SyncServiceClient.
type syncServiceClient struct {
	start        *connect.Client[v1.SyncStartRequest, v1.SyncStartResponse]
	stop         *connect.Client[v1.SyncStopRequest, v1.SyncStopResponse]
	createSync   *connect.Client[v1.SyncCreateRequest, v1.SyncCreateResponse]
	removeSync   *connect.Client[v1.SyncRemoveRequest, v1.SyncRemoveResponse]
	getSyncList  *connect.Client[v1.SyncGetListRequest, v1.SyncGetListResponse]
	getSyncById  *connect.Client[v1.SyncGetByIdRequest, v1.SyncGetByIdResponse]
	lockCheck    *connect.Client[v1.SyncLockCheckRequest, v1.SyncLockCheckResponse]
	updateStatus *connect.Client[v1.SyncUpdateStatusRequest, v1.SyncUpdateStatusResponse]
}

// Start calls pixelfs.v1.SyncService.Start.
func (c *syncServiceClient) Start(ctx context.Context, req *connect.Request[v1.SyncStartRequest]) (*connect.Response[v1.SyncStartResponse], error) {
	return c.start.CallUnary(ctx, req)
}

// Stop calls pixelfs.v1.SyncService.Stop.
func (c *syncServiceClient) Stop(ctx context.Context, req *connect.Request[v1.SyncStopRequest]) (*connect.Response[v1.SyncStopResponse], error) {
	return c.stop.CallUnary(ctx, req)
}

// CreateSync calls pixelfs.v1.SyncService.CreateSync.
func (c *syncServiceClient) CreateSync(ctx context.Context, req *connect.Request[v1.SyncCreateRequest]) (*connect.Response[v1.SyncCreateResponse], error) {
	return c.createSync.CallUnary(ctx, req)
}

// RemoveSync calls pixelfs.v1.SyncService.RemoveSync.
func (c *syncServiceClient) RemoveSync(ctx context.Context, req *connect.Request[v1.SyncRemoveRequest]) (*connect.Response[v1.SyncRemoveResponse], error) {
	return c.removeSync.CallUnary(ctx, req)
}

// GetSyncList calls pixelfs.v1.SyncService.GetSyncList.
func (c *syncServiceClient) GetSyncList(ctx context.Context, req *connect.Request[v1.SyncGetListRequest]) (*connect.Response[v1.SyncGetListResponse], error) {
	return c.getSyncList.CallUnary(ctx, req)
}

// GetSyncById calls pixelfs.v1.SyncService.GetSyncById.
func (c *syncServiceClient) GetSyncById(ctx context.Context, req *connect.Request[v1.SyncGetByIdRequest]) (*connect.Response[v1.SyncGetByIdResponse], error) {
	return c.getSyncById.CallUnary(ctx, req)
}

// LockCheck calls pixelfs.v1.SyncService.LockCheck.
func (c *syncServiceClient) LockCheck(ctx context.Context, req *connect.Request[v1.SyncLockCheckRequest]) (*connect.Response[v1.SyncLockCheckResponse], error) {
	return c.lockCheck.CallUnary(ctx, req)
}

// UpdateStatus calls pixelfs.v1.SyncService.UpdateStatus.
func (c *syncServiceClient) UpdateStatus(ctx context.Context, req *connect.Request[v1.SyncUpdateStatusRequest]) (*connect.Response[v1.SyncUpdateStatusResponse], error) {
	return c.updateStatus.CallUnary(ctx, req)
}

// SyncServiceHandler is an implementation of the pixelfs.v1.SyncService service.
type SyncServiceHandler interface {
	Start(context.Context, *connect.Request[v1.SyncStartRequest]) (*connect.Response[v1.SyncStartResponse], error)
	Stop(context.Context, *connect.Request[v1.SyncStopRequest]) (*connect.Response[v1.SyncStopResponse], error)
	CreateSync(context.Context, *connect.Request[v1.SyncCreateRequest]) (*connect.Response[v1.SyncCreateResponse], error)
	RemoveSync(context.Context, *connect.Request[v1.SyncRemoveRequest]) (*connect.Response[v1.SyncRemoveResponse], error)
	GetSyncList(context.Context, *connect.Request[v1.SyncGetListRequest]) (*connect.Response[v1.SyncGetListResponse], error)
	GetSyncById(context.Context, *connect.Request[v1.SyncGetByIdRequest]) (*connect.Response[v1.SyncGetByIdResponse], error)
	LockCheck(context.Context, *connect.Request[v1.SyncLockCheckRequest]) (*connect.Response[v1.SyncLockCheckResponse], error)
	UpdateStatus(context.Context, *connect.Request[v1.SyncUpdateStatusRequest]) (*connect.Response[v1.SyncUpdateStatusResponse], error)
}

// NewSyncServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSyncServiceHandler(svc SyncServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	syncServiceStartHandler := connect.NewUnaryHandler(
		SyncServiceStartProcedure,
		svc.Start,
		connect.WithSchema(syncServiceStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceStopHandler := connect.NewUnaryHandler(
		SyncServiceStopProcedure,
		svc.Stop,
		connect.WithSchema(syncServiceStopMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceCreateSyncHandler := connect.NewUnaryHandler(
		SyncServiceCreateSyncProcedure,
		svc.CreateSync,
		connect.WithSchema(syncServiceCreateSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceRemoveSyncHandler := connect.NewUnaryHandler(
		SyncServiceRemoveSyncProcedure,
		svc.RemoveSync,
		connect.WithSchema(syncServiceRemoveSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceGetSyncListHandler := connect.NewUnaryHandler(
		SyncServiceGetSyncListProcedure,
		svc.GetSyncList,
		connect.WithSchema(syncServiceGetSyncListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceGetSyncByIdHandler := connect.NewUnaryHandler(
		SyncServiceGetSyncByIdProcedure,
		svc.GetSyncById,
		connect.WithSchema(syncServiceGetSyncByIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceLockCheckHandler := connect.NewUnaryHandler(
		SyncServiceLockCheckProcedure,
		svc.LockCheck,
		connect.WithSchema(syncServiceLockCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceUpdateStatusHandler := connect.NewUnaryHandler(
		SyncServiceUpdateStatusProcedure,
		svc.UpdateStatus,
		connect.WithSchema(syncServiceUpdateStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pixelfs.v1.SyncService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SyncServiceStartProcedure:
			syncServiceStartHandler.ServeHTTP(w, r)
		case SyncServiceStopProcedure:
			syncServiceStopHandler.ServeHTTP(w, r)
		case SyncServiceCreateSyncProcedure:
			syncServiceCreateSyncHandler.ServeHTTP(w, r)
		case SyncServiceRemoveSyncProcedure:
			syncServiceRemoveSyncHandler.ServeHTTP(w, r)
		case SyncServiceGetSyncListProcedure:
			syncServiceGetSyncListHandler.ServeHTTP(w, r)
		case SyncServiceGetSyncByIdProcedure:
			syncServiceGetSyncByIdHandler.ServeHTTP(w, r)
		case SyncServiceLockCheckProcedure:
			syncServiceLockCheckHandler.ServeHTTP(w, r)
		case SyncServiceUpdateStatusProcedure:
			syncServiceUpdateStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSyncServiceHandler struct{}

func (UnimplementedSyncServiceHandler) Start(context.Context, *connect.Request[v1.SyncStartRequest]) (*connect.Response[v1.SyncStartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.SyncService.Start is not implemented"))
}

func (UnimplementedSyncServiceHandler) Stop(context.Context, *connect.Request[v1.SyncStopRequest]) (*connect.Response[v1.SyncStopResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.SyncService.Stop is not implemented"))
}

func (UnimplementedSyncServiceHandler) CreateSync(context.Context, *connect.Request[v1.SyncCreateRequest]) (*connect.Response[v1.SyncCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.SyncService.CreateSync is not implemented"))
}

func (UnimplementedSyncServiceHandler) RemoveSync(context.Context, *connect.Request[v1.SyncRemoveRequest]) (*connect.Response[v1.SyncRemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.SyncService.RemoveSync is not implemented"))
}

func (UnimplementedSyncServiceHandler) GetSyncList(context.Context, *connect.Request[v1.SyncGetListRequest]) (*connect.Response[v1.SyncGetListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.SyncService.GetSyncList is not implemented"))
}

func (UnimplementedSyncServiceHandler) GetSyncById(context.Context, *connect.Request[v1.SyncGetByIdRequest]) (*connect.Response[v1.SyncGetByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.SyncService.GetSyncById is not implemented"))
}

func (UnimplementedSyncServiceHandler) LockCheck(context.Context, *connect.Request[v1.SyncLockCheckRequest]) (*connect.Response[v1.SyncLockCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.SyncService.LockCheck is not implemented"))
}

func (UnimplementedSyncServiceHandler) UpdateStatus(context.Context, *connect.Request[v1.SyncUpdateStatusRequest]) (*connect.Response[v1.SyncUpdateStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.SyncService.UpdateStatus is not implemented"))
}
