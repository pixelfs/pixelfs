// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pixelfs/v1/auth.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pixelfs/pixelfs/gen/pixelfs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "pixelfs.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceCreateCliSessionProcedure is the fully-qualified name of the AuthService's
	// CreateCliSession RPC.
	AuthServiceCreateCliSessionProcedure = "/pixelfs.v1.AuthService/CreateCliSession"
	// AuthServiceVerifyCliSessionProcedure is the fully-qualified name of the AuthService's
	// VerifyCliSession RPC.
	AuthServiceVerifyCliSessionProcedure = "/pixelfs.v1.AuthService/VerifyCliSession"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor                = v1.File_pixelfs_v1_auth_proto.Services().ByName("AuthService")
	authServiceCreateCliSessionMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("CreateCliSession")
	authServiceVerifyCliSessionMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("VerifyCliSession")
)

// AuthServiceClient is a client for the pixelfs.v1.AuthService service.
type AuthServiceClient interface {
	CreateCliSession(context.Context, *connect.Request[v1.CreateCliSessionRequest]) (*connect.Response[v1.CreateCliSessionResponse], error)
	VerifyCliSession(context.Context, *connect.Request[v1.VerifyCliSessionRequest]) (*connect.Response[v1.VerifyCliSessionResponse], error)
}

// NewAuthServiceClient constructs a client for the pixelfs.v1.AuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		createCliSession: connect.NewClient[v1.CreateCliSessionRequest, v1.CreateCliSessionResponse](
			httpClient,
			baseURL+AuthServiceCreateCliSessionProcedure,
			connect.WithSchema(authServiceCreateCliSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		verifyCliSession: connect.NewClient[v1.VerifyCliSessionRequest, v1.VerifyCliSessionResponse](
			httpClient,
			baseURL+AuthServiceVerifyCliSessionProcedure,
			connect.WithSchema(authServiceVerifyCliSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	createCliSession *connect.Client[v1.CreateCliSessionRequest, v1.CreateCliSessionResponse]
	verifyCliSession *connect.Client[v1.VerifyCliSessionRequest, v1.VerifyCliSessionResponse]
}

// CreateCliSession calls pixelfs.v1.AuthService.CreateCliSession.
func (c *authServiceClient) CreateCliSession(ctx context.Context, req *connect.Request[v1.CreateCliSessionRequest]) (*connect.Response[v1.CreateCliSessionResponse], error) {
	return c.createCliSession.CallUnary(ctx, req)
}

// VerifyCliSession calls pixelfs.v1.AuthService.VerifyCliSession.
func (c *authServiceClient) VerifyCliSession(ctx context.Context, req *connect.Request[v1.VerifyCliSessionRequest]) (*connect.Response[v1.VerifyCliSessionResponse], error) {
	return c.verifyCliSession.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the pixelfs.v1.AuthService service.
type AuthServiceHandler interface {
	CreateCliSession(context.Context, *connect.Request[v1.CreateCliSessionRequest]) (*connect.Response[v1.CreateCliSessionResponse], error)
	VerifyCliSession(context.Context, *connect.Request[v1.VerifyCliSessionRequest]) (*connect.Response[v1.VerifyCliSessionResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceCreateCliSessionHandler := connect.NewUnaryHandler(
		AuthServiceCreateCliSessionProcedure,
		svc.CreateCliSession,
		connect.WithSchema(authServiceCreateCliSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyCliSessionHandler := connect.NewUnaryHandler(
		AuthServiceVerifyCliSessionProcedure,
		svc.VerifyCliSession,
		connect.WithSchema(authServiceVerifyCliSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pixelfs.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceCreateCliSessionProcedure:
			authServiceCreateCliSessionHandler.ServeHTTP(w, r)
		case AuthServiceVerifyCliSessionProcedure:
			authServiceVerifyCliSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) CreateCliSession(context.Context, *connect.Request[v1.CreateCliSessionRequest]) (*connect.Response[v1.CreateCliSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.AuthService.CreateCliSession is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyCliSession(context.Context, *connect.Request[v1.VerifyCliSessionRequest]) (*connect.Response[v1.VerifyCliSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.AuthService.VerifyCliSession is not implemented"))
}
