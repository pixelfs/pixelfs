// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pixelfs/v1/location.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pixelfs/pixelfs/gen/pixelfs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LocationServiceName is the fully-qualified name of the LocationService service.
	LocationServiceName = "pixelfs.v1.LocationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LocationServiceGetLocationsProcedure is the fully-qualified name of the LocationService's
	// GetLocations RPC.
	LocationServiceGetLocationsProcedure = "/pixelfs.v1.LocationService/GetLocations"
	// LocationServiceGetLocationByContextProcedure is the fully-qualified name of the LocationService's
	// GetLocationByContext RPC.
	LocationServiceGetLocationByContextProcedure = "/pixelfs.v1.LocationService/GetLocationByContext"
	// LocationServiceAddLocationProcedure is the fully-qualified name of the LocationService's
	// AddLocation RPC.
	LocationServiceAddLocationProcedure = "/pixelfs.v1.LocationService/AddLocation"
	// LocationServiceRemoveLocationProcedure is the fully-qualified name of the LocationService's
	// RemoveLocation RPC.
	LocationServiceRemoveLocationProcedure = "/pixelfs.v1.LocationService/RemoveLocation"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	locationServiceServiceDescriptor                    = v1.File_pixelfs_v1_location_proto.Services().ByName("LocationService")
	locationServiceGetLocationsMethodDescriptor         = locationServiceServiceDescriptor.Methods().ByName("GetLocations")
	locationServiceGetLocationByContextMethodDescriptor = locationServiceServiceDescriptor.Methods().ByName("GetLocationByContext")
	locationServiceAddLocationMethodDescriptor          = locationServiceServiceDescriptor.Methods().ByName("AddLocation")
	locationServiceRemoveLocationMethodDescriptor       = locationServiceServiceDescriptor.Methods().ByName("RemoveLocation")
)

// LocationServiceClient is a client for the pixelfs.v1.LocationService service.
type LocationServiceClient interface {
	GetLocations(context.Context, *connect.Request[v1.GetLocationsRequest]) (*connect.Response[v1.GetLocationsResponse], error)
	GetLocationByContext(context.Context, *connect.Request[v1.GetLocationByContextRequest]) (*connect.Response[v1.GetLocationByContextResponse], error)
	AddLocation(context.Context, *connect.Request[v1.AddLocationRequest]) (*connect.Response[v1.AddLocationResponse], error)
	RemoveLocation(context.Context, *connect.Request[v1.RemoveLocationRequest]) (*connect.Response[v1.RemoveLocationResponse], error)
}

// NewLocationServiceClient constructs a client for the pixelfs.v1.LocationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLocationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LocationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &locationServiceClient{
		getLocations: connect.NewClient[v1.GetLocationsRequest, v1.GetLocationsResponse](
			httpClient,
			baseURL+LocationServiceGetLocationsProcedure,
			connect.WithSchema(locationServiceGetLocationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLocationByContext: connect.NewClient[v1.GetLocationByContextRequest, v1.GetLocationByContextResponse](
			httpClient,
			baseURL+LocationServiceGetLocationByContextProcedure,
			connect.WithSchema(locationServiceGetLocationByContextMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addLocation: connect.NewClient[v1.AddLocationRequest, v1.AddLocationResponse](
			httpClient,
			baseURL+LocationServiceAddLocationProcedure,
			connect.WithSchema(locationServiceAddLocationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeLocation: connect.NewClient[v1.RemoveLocationRequest, v1.RemoveLocationResponse](
			httpClient,
			baseURL+LocationServiceRemoveLocationProcedure,
			connect.WithSchema(locationServiceRemoveLocationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// locationServiceClient implements LocationServiceClient.
type locationServiceClient struct {
	getLocations         *connect.Client[v1.GetLocationsRequest, v1.GetLocationsResponse]
	getLocationByContext *connect.Client[v1.GetLocationByContextRequest, v1.GetLocationByContextResponse]
	addLocation          *connect.Client[v1.AddLocationRequest, v1.AddLocationResponse]
	removeLocation       *connect.Client[v1.RemoveLocationRequest, v1.RemoveLocationResponse]
}

// GetLocations calls pixelfs.v1.LocationService.GetLocations.
func (c *locationServiceClient) GetLocations(ctx context.Context, req *connect.Request[v1.GetLocationsRequest]) (*connect.Response[v1.GetLocationsResponse], error) {
	return c.getLocations.CallUnary(ctx, req)
}

// GetLocationByContext calls pixelfs.v1.LocationService.GetLocationByContext.
func (c *locationServiceClient) GetLocationByContext(ctx context.Context, req *connect.Request[v1.GetLocationByContextRequest]) (*connect.Response[v1.GetLocationByContextResponse], error) {
	return c.getLocationByContext.CallUnary(ctx, req)
}

// AddLocation calls pixelfs.v1.LocationService.AddLocation.
func (c *locationServiceClient) AddLocation(ctx context.Context, req *connect.Request[v1.AddLocationRequest]) (*connect.Response[v1.AddLocationResponse], error) {
	return c.addLocation.CallUnary(ctx, req)
}

// RemoveLocation calls pixelfs.v1.LocationService.RemoveLocation.
func (c *locationServiceClient) RemoveLocation(ctx context.Context, req *connect.Request[v1.RemoveLocationRequest]) (*connect.Response[v1.RemoveLocationResponse], error) {
	return c.removeLocation.CallUnary(ctx, req)
}

// LocationServiceHandler is an implementation of the pixelfs.v1.LocationService service.
type LocationServiceHandler interface {
	GetLocations(context.Context, *connect.Request[v1.GetLocationsRequest]) (*connect.Response[v1.GetLocationsResponse], error)
	GetLocationByContext(context.Context, *connect.Request[v1.GetLocationByContextRequest]) (*connect.Response[v1.GetLocationByContextResponse], error)
	AddLocation(context.Context, *connect.Request[v1.AddLocationRequest]) (*connect.Response[v1.AddLocationResponse], error)
	RemoveLocation(context.Context, *connect.Request[v1.RemoveLocationRequest]) (*connect.Response[v1.RemoveLocationResponse], error)
}

// NewLocationServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLocationServiceHandler(svc LocationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	locationServiceGetLocationsHandler := connect.NewUnaryHandler(
		LocationServiceGetLocationsProcedure,
		svc.GetLocations,
		connect.WithSchema(locationServiceGetLocationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	locationServiceGetLocationByContextHandler := connect.NewUnaryHandler(
		LocationServiceGetLocationByContextProcedure,
		svc.GetLocationByContext,
		connect.WithSchema(locationServiceGetLocationByContextMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	locationServiceAddLocationHandler := connect.NewUnaryHandler(
		LocationServiceAddLocationProcedure,
		svc.AddLocation,
		connect.WithSchema(locationServiceAddLocationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	locationServiceRemoveLocationHandler := connect.NewUnaryHandler(
		LocationServiceRemoveLocationProcedure,
		svc.RemoveLocation,
		connect.WithSchema(locationServiceRemoveLocationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/pixelfs.v1.LocationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LocationServiceGetLocationsProcedure:
			locationServiceGetLocationsHandler.ServeHTTP(w, r)
		case LocationServiceGetLocationByContextProcedure:
			locationServiceGetLocationByContextHandler.ServeHTTP(w, r)
		case LocationServiceAddLocationProcedure:
			locationServiceAddLocationHandler.ServeHTTP(w, r)
		case LocationServiceRemoveLocationProcedure:
			locationServiceRemoveLocationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLocationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLocationServiceHandler struct{}

func (UnimplementedLocationServiceHandler) GetLocations(context.Context, *connect.Request[v1.GetLocationsRequest]) (*connect.Response[v1.GetLocationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.LocationService.GetLocations is not implemented"))
}

func (UnimplementedLocationServiceHandler) GetLocationByContext(context.Context, *connect.Request[v1.GetLocationByContextRequest]) (*connect.Response[v1.GetLocationByContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.LocationService.GetLocationByContext is not implemented"))
}

func (UnimplementedLocationServiceHandler) AddLocation(context.Context, *connect.Request[v1.AddLocationRequest]) (*connect.Response[v1.AddLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.LocationService.AddLocation is not implemented"))
}

func (UnimplementedLocationServiceHandler) RemoveLocation(context.Context, *connect.Request[v1.RemoveLocationRequest]) (*connect.Response[v1.RemoveLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pixelfs.v1.LocationService.RemoveLocation is not implemented"))
}
